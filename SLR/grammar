E -> EM BLOCK_FIRST
EM -> ^
BLOCK_FIRST -> BLOCKM_FIRST STATEMENT
BLOCKM_FIRST -> CONST_PART' VARIABLE_PART' PROCEDURE_PART'
CONST_PART' -> CONST_PART
CONST_PART' -> ^
VARIABLE_PART' -> VARIABLE_PART
VARIABLE_PART' -> ^
PROCEDURE_PART' -> PROCEDURE_PART
PROCEDURE_PART' -> ^
CONST_PART -> const CONST_DEFINE CONST_MORE ;
CONST_MORE ->  , CONST_DEFINE CONST_MORE
CONST_MORE ->  ^
CONST_DEFINE -> identifier = number
VARIABLE_PART -> var identifier VARIABLE_MORE ;
VARIABLE_MORE -> , identifier VARIABLE_MORE
VARIABLE_MORE -> ^
PROCEDURE_PART -> PROCEDURE_MORE PROCEDURE_HEADER BLOCK ;
PROCEDURE_MORE -> PROCEDURE_PART
PROCEDURE_MORE -> ^
PROCEDURE_HEADER -> procedure identifier ;
BLOCK -> BLOCKM STATEMENT
BLOCKM -> CONST_PART' VARIABLE_PART' PROCEDURE_PART'
STATEMENT -> ASSIGN_STATEMENT
STATEMENT -> CONDITION_STATEMENT
STATEMENT -> WHILE_STATEMENT
STATEMENT -> CALL_STATEMENT
STATEMENT -> READ_STATEMENT
STATEMENT -> WRITE_STATEMENT
STATEMENT -> COMPOUND_STATEMENT
STATEMENT -> ^
ASSIGN_STATEMENT -> identifier := EXPRESSION
CONDITION -> EXPRESSION RELATION_OPT EXPRESSION
CONDITION -> odd EXPRESSION
EXPRESSION -> EXPRESSION_FIRST_CALCULATE EXPRESSION_MORE_OPT
EXPRESSION_FIRST_CALCULATE -> EXPRESSION_HEADER ITEM
EXPRESSION_HEADER -> +
EXPRESSION_HEADER -> -
EXPRESSION_HEADER -> ^
EXPRESSION_MORE_OPT -> EXPRESSION_MORE_OPT EXPRESSION_MORE_OPT_CALCULATE
EXPRESSION_MORE_OPT_CALCULATE -> ADD_SUB_OPT ITEM
EXPRESSION_MORE_OPT -> ^
ITEM -> FACTOR ITEM_MORE_OPT
ITEM_MORE_OPT -> ITEM_MORE_OPT CALCULATE_ITEM
CALCULATE_ITEM -> MULTIPLY_DIVIDE_OPT FACTOR
ITEM_MORE_OPT -> ^
FACTOR -> identifier
FACTOR -> number
FACTOR -> ( EXPRESSION )
ADD_SUB_OPT -> +
ADD_SUB_OPT -> -
MULTIPLY_DIVIDE_OPT -> *
MULTIPLY_DIVIDE_OPT -> /
RELATION_OPT -> =
RELATION_OPT -> #
RELATION_OPT -> <
RELATION_OPT -> >=
RELATION_OPT -> >
RELATION_OPT -> <=
COMPOUND_STATEMENT -> begin STATEMENT STATEMENT_MORE end
STATEMENT_MORE -> ^
STATEMENT_MORE -> ; STATEMENT STATEMENT_MORE
CONDITION_STATEMENT -> if CONDITION then TRUE_OUT STATEMENT
TRUE_OUT -> ^
CALL_STATEMENT -> call identifier
WHILE_STATEMENT -> WHILE_BEGIN while CONDITION do TRUE_OUT STATEMENT
WHILE_BEGIN -> ^
READ_STATEMENT -> READ_FIRST READ_MORE )
READ_FIRST -> read ( identifier
READ_MORE -> , identifier READ_MORE
READ_MORE -> ^
WRITE_STATEMENT -> WRITE_FIRST WRITE_MORE )
WRITE_FIRST -> write ( EXPRESSION
WRITE_MORE -> , EXPRESSION WRITE_MORE_M WRITE_MORE
WRITE_MORE_M -> ^
WRITE_MORE -> ^